Texture2D g_ShaderTexture;
SamplerState g_SampleType;

cbuffer LightBuffer
{
	float4 ambientColor;
    float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
	float4 specularColour;
};

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
};

float4 LightPixelShader(PixelInputType i) : SV_TARGET
{
    float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 colour;
	float3 reflection;
	float4 specular;


    // Sample the pixel colour from the texture using the sampler at this texture coordinate location.
    textureColor = g_ShaderTexture.Sample(g_SampleType, i.tex);

	// set the default output colour to the ambient light value for all pixels
	colour = ambientColor;

	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(i.normal, lightDir));

	if (lightIntensity > 0.0f)
	{
		// Determine the final diffuse colour based on the diffuse colour and the amount of light intensity
		colour += (diffuseColor * lightIntensity);

		// Saturate the ambient and diffuse colour
		colour = saturate(colour);

		// Calculate the reflection vector based on the light intensity, normal and light direction.
		reflection = normalize(2 * lightIntensity * i.normal - lightDir);

		specular = pow(saturate(dot(reflection, i.viewDirection)), specularPower);
	}
	
    // Multiply the texture pixel and the final diffuse colour to get the final pixel colour result.
    colour = colour * textureColor;
	
	// Determine the final amount of diffuse colour based on the diffuse colour combined with the light intensity.
    colour = saturate(colour + specular);
    
	return colour;
}